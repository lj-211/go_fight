// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/Shutdown.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg/Shutdown.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Shutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shutdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shutdown_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shutdown_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shutdown_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shutdown_Res_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2fShutdown_2eproto() {
  protobuf_AddDesc_msg_2fShutdown_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg/Shutdown.proto");
  GOOGLE_CHECK(file != NULL);
  Shutdown_descriptor_ = file->message_type(0);
  static const int Shutdown_offsets_[1] = {
  };
  Shutdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shutdown_descriptor_,
      Shutdown::default_instance_,
      Shutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shutdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shutdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shutdown));
  Shutdown_Req_descriptor_ = Shutdown_descriptor_->nested_type(0);
  static const int Shutdown_Req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shutdown_Req, code_),
  };
  Shutdown_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shutdown_Req_descriptor_,
      Shutdown_Req::default_instance_,
      Shutdown_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shutdown_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shutdown_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shutdown_Req));
  Shutdown_Res_descriptor_ = Shutdown_descriptor_->nested_type(1);
  static const int Shutdown_Res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shutdown_Res, code_),
  };
  Shutdown_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shutdown_Res_descriptor_,
      Shutdown_Res::default_instance_,
      Shutdown_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shutdown_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shutdown_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shutdown_Res));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2fShutdown_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shutdown_descriptor_, &Shutdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shutdown_Req_descriptor_, &Shutdown_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shutdown_Res_descriptor_, &Shutdown_Res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2fShutdown_2eproto() {
  delete Shutdown::default_instance_;
  delete Shutdown_reflection_;
  delete Shutdown_Req::default_instance_;
  delete Shutdown_Req_reflection_;
  delete Shutdown_Res::default_instance_;
  delete Shutdown_Res_reflection_;
}

void protobuf_AddDesc_msg_2fShutdown_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022msg/Shutdown.proto\"4\n\010Shutdown\032\023\n\003Req\022"
    "\014\n\004code\030\001 \002(\005\032\023\n\003Res\022\014\n\004code\030\001 \002(\005", 74);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg/Shutdown.proto", &protobuf_RegisterTypes);
  Shutdown::default_instance_ = new Shutdown();
  Shutdown_Req::default_instance_ = new Shutdown_Req();
  Shutdown_Res::default_instance_ = new Shutdown_Res();
  Shutdown::default_instance_->InitAsDefaultInstance();
  Shutdown_Req::default_instance_->InitAsDefaultInstance();
  Shutdown_Res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2fShutdown_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2fShutdown_2eproto {
  StaticDescriptorInitializer_msg_2fShutdown_2eproto() {
    protobuf_AddDesc_msg_2fShutdown_2eproto();
  }
} static_descriptor_initializer_msg_2fShutdown_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Shutdown_Req::kCodeFieldNumber;
#endif  // !_MSC_VER

Shutdown_Req::Shutdown_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shutdown.Req)
}

void Shutdown_Req::InitAsDefaultInstance() {
}

Shutdown_Req::Shutdown_Req(const Shutdown_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shutdown.Req)
}

void Shutdown_Req::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shutdown_Req::~Shutdown_Req() {
  // @@protoc_insertion_point(destructor:Shutdown.Req)
  SharedDtor();
}

void Shutdown_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shutdown_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shutdown_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shutdown_Req_descriptor_;
}

const Shutdown_Req& Shutdown_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2fShutdown_2eproto();
  return *default_instance_;
}

Shutdown_Req* Shutdown_Req::default_instance_ = NULL;

Shutdown_Req* Shutdown_Req::New() const {
  return new Shutdown_Req;
}

void Shutdown_Req::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shutdown_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Shutdown.Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shutdown.Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shutdown.Req)
  return false;
#undef DO_
}

void Shutdown_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shutdown.Req)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Shutdown.Req)
}

::google::protobuf::uint8* Shutdown_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shutdown.Req)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shutdown.Req)
  return target;
}

int Shutdown_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shutdown_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shutdown_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shutdown_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shutdown_Req::MergeFrom(const Shutdown_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shutdown_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shutdown_Req::CopyFrom(const Shutdown_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shutdown_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Shutdown_Req::Swap(Shutdown_Req* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shutdown_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shutdown_Req_descriptor_;
  metadata.reflection = Shutdown_Req_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Shutdown_Res::kCodeFieldNumber;
#endif  // !_MSC_VER

Shutdown_Res::Shutdown_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shutdown.Res)
}

void Shutdown_Res::InitAsDefaultInstance() {
}

Shutdown_Res::Shutdown_Res(const Shutdown_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shutdown.Res)
}

void Shutdown_Res::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shutdown_Res::~Shutdown_Res() {
  // @@protoc_insertion_point(destructor:Shutdown.Res)
  SharedDtor();
}

void Shutdown_Res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shutdown_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shutdown_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shutdown_Res_descriptor_;
}

const Shutdown_Res& Shutdown_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2fShutdown_2eproto();
  return *default_instance_;
}

Shutdown_Res* Shutdown_Res::default_instance_ = NULL;

Shutdown_Res* Shutdown_Res::New() const {
  return new Shutdown_Res;
}

void Shutdown_Res::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shutdown_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Shutdown.Res)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shutdown.Res)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shutdown.Res)
  return false;
#undef DO_
}

void Shutdown_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shutdown.Res)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Shutdown.Res)
}

::google::protobuf::uint8* Shutdown_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shutdown.Res)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shutdown.Res)
  return target;
}

int Shutdown_Res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shutdown_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shutdown_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shutdown_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shutdown_Res::MergeFrom(const Shutdown_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shutdown_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shutdown_Res::CopyFrom(const Shutdown_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shutdown_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Shutdown_Res::Swap(Shutdown_Res* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shutdown_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shutdown_Res_descriptor_;
  metadata.reflection = Shutdown_Res_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Shutdown::Shutdown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shutdown)
}

void Shutdown::InitAsDefaultInstance() {
}

Shutdown::Shutdown(const Shutdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shutdown)
}

void Shutdown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shutdown::~Shutdown() {
  // @@protoc_insertion_point(destructor:Shutdown)
  SharedDtor();
}

void Shutdown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shutdown_descriptor_;
}

const Shutdown& Shutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2fShutdown_2eproto();
  return *default_instance_;
}

Shutdown* Shutdown::default_instance_ = NULL;

Shutdown* Shutdown::New() const {
  return new Shutdown;
}

void Shutdown::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Shutdown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Shutdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shutdown)
  return false;
#undef DO_
}

void Shutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shutdown)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Shutdown)
}

::google::protobuf::uint8* Shutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shutdown)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shutdown)
  return target;
}

int Shutdown::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shutdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shutdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shutdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shutdown::MergeFrom(const Shutdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shutdown::CopyFrom(const Shutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shutdown::IsInitialized() const {

  return true;
}

void Shutdown::Swap(Shutdown* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shutdown_descriptor_;
  metadata.reflection = Shutdown_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
